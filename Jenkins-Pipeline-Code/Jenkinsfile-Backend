pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        DOCKER_REPO_NAME = 'rsduran/backend'
        DOCKERHUB_CREDENTIALS_ID = 'docker' // ID for the DockerHub credentials
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/rsduran/quiz-app.git'
            }
        }
        
        stage("Docker Image Build") {
            steps {
                script {
                    dir('backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${DOCKER_REPO_NAME}:${BUILD_NUMBER} -f Dockerfile.backend .'
                    }
                }
            }
        }
        stage("DockerHub Image Push") {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS_ID}") {
                        sh 'docker push ${DOCKER_REPO_NAME}:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "quiz-app"
                GIT_USER_NAME = "rsduran"
            }
            steps {
                dir('Kubernetes-Manifests/Backend') {
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        script {
                            // Update the deployment YAML file with the new Docker image tag
                            def currentTag = sh(script: "grep -oP '(?<=backend:)[^ ]+' deployment.yaml", returnStdout: true).trim()
                            echo "Current Image Tag: ${currentTag}"
                            sh "sed -i 's|${DOCKER_REPO_NAME}:${currentTag}|${DOCKER_REPO_NAME}:${BUILD_NUMBER}|' deployment.yaml"
                            
                            // Check if the deployment.yaml file has been modified
                            def changes = sh(script: 'git status --porcelain', returnStdout: true).trim()
                            if (changes) {
                                // Add changes, commit, and push to the GitHub repository
                                sh '''
                                    git config user.email "reineirsamonteduran@gmail.com"
                                    git config user.name "rsduran"
                                    git add deployment.yaml
                                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                                '''
                            } else {
                                echo "No changes detected in deployment.yaml, skipping commit."
                            }
                        }
                    }
                }
            }
        }
    }
}